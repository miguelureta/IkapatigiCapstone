// <auto-generated />
using System;
using IkapatigiCapstone.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IkapatigiCapstone.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("IkapatigiCapstone.Models.AddRequestDiagnostic", b =>
                {
                    b.Property<int>("AddRequestDiagnosticId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AddRequestDiagnosticID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddRequestDiagnosticId"), 1L, 1);

                    b.Property<int?>("ApprovedUserId")
                        .HasColumnType("int")
                        .HasColumnName("ApprovedUserID");

                    b.Property<string>("CureName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateApproved")
                        .HasColumnType("datetime");

                    b.Property<string>("DiseaseName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ImageName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("RequestedUserId")
                        .HasColumnType("int")
                        .HasColumnName("RequestedUserID");

                    b.Property<decimal?>("Srp")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("SRP");

                    b.Property<string>("TagName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AddRequestDiagnosticId");

                    b.ToTable("AddRequestDiagnostics");
                });

            modelBuilder.Entity("IkapatigiCapstone.Models.Cure", b =>
                {
                    b.Property<int>("CureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CureID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CureId"), 1L, 1);

                    b.Property<string>("CureName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.Property<decimal>("Srp")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("SRP");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CureId");

                    b.ToTable("Cures");
                });

            modelBuilder.Entity("IkapatigiCapstone.Models.Diagnostic", b =>
                {
                    b.Property<int>("DiagnosticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DiagnosticsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnosticsId"), 1L, 1);

                    b.Property<int?>("CureId")
                        .HasColumnType("int")
                        .HasColumnName("CureID");

                    b.Property<int?>("PictureCollectionFromId")
                        .HasColumnType("int")
                        .HasColumnName("PictureCollectionFromID");

                    b.Property<int?>("PlantDiseaseId")
                        .HasColumnType("int")
                        .HasColumnName("PlantDiseaseID");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int?>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    b.HasKey("DiagnosticsId")
                        .HasName("PK_Diagnostics_1");

                    b.HasIndex("CureId");

                    b.HasIndex("PlantDiseaseId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TagId");

                    b.ToTable("Diagnostics");
                });

            modelBuilder.Entity("IkapatigiCapstone.Models.PlantDisease", b =>
                {
                    b.Property<int>("PlantDiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlantDiseaseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantDiseaseId"), 1L, 1);

                    b.Property<int?>("CureId")
                        .HasColumnType("int")
                        .HasColumnName("CureID");

                    b.Property<string>("DiseaseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("ImageOfDisease")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("PlantDiseaseId");

                    b.HasIndex("TagId");

                    b.ToTable("PlantDiseases");
                });

            modelBuilder.Entity("IkapatigiCapstone.Models.PlantDiseasesNoCure", b =>
                {
                    b.Property<int>("PlantDiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlantDiseaseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantDiseaseId"), 1L, 1);

                    b.Property<int?>("CureId")
                        .HasColumnType("int")
                        .HasColumnName("CureID");

                    b.Property<string>("DiseaseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("ImageOfDisease")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    b.HasKey("PlantDiseaseId")
                        .HasName("PK_PlantDiseases");

                    b.ToTable("PlantDiseases-no cures", (string)null);
                });

            modelBuilder.Entity("IkapatigiCapstone.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<string>("StatusType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("StatusId");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("IkapatigiCapstone.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"), 1L, 1);

                    b.Property<string>("TagName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("IkapatigiCapstone.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<bool?>("CanceledSubscription")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("RemainingSubscriptionDays")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionID");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IkapatigiCapstone.Models.Diagnostic", b =>
                {
                    b.HasOne("IkapatigiCapstone.Models.Cure", "Cure")
                        .WithMany("Diagnostics")
                        .HasForeignKey("CureId")
                        .HasConstraintName("FK_Diagnostics_Cures");

                    b.HasOne("IkapatigiCapstone.Models.PlantDisease", "PlantDisease")
                        .WithMany("Diagnostics")
                        .HasForeignKey("PlantDiseaseId")
                        .HasConstraintName("FK_Diagnostics_PlantDiseases");

                    b.HasOne("IkapatigiCapstone.Models.Status", "Status")
                        .WithMany("Diagnostics")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Diagnostics_Status");

                    b.HasOne("IkapatigiCapstone.Models.Tag", "Tag")
                        .WithMany("Diagnostics")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_Diagnostics_Tags");

                    b.Navigation("Cure");

                    b.Navigation("PlantDisease");

                    b.Navigation("Status");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("IkapatigiCapstone.Models.PlantDisease", b =>
                {
                    b.HasOne("IkapatigiCapstone.Models.Tag", "Tag")
                        .WithMany("PlantDiseases")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_PlantDiseases_Tags");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("IkapatigiCapstone.Models.Cure", b =>
                {
                    b.Navigation("Diagnostics");
                });

            modelBuilder.Entity("IkapatigiCapstone.Models.PlantDisease", b =>
                {
                    b.Navigation("Diagnostics");
                });

            modelBuilder.Entity("IkapatigiCapstone.Models.Status", b =>
                {
                    b.Navigation("Diagnostics");
                });

            modelBuilder.Entity("IkapatigiCapstone.Models.Tag", b =>
                {
                    b.Navigation("Diagnostics");

                    b.Navigation("PlantDiseases");
                });
#pragma warning restore 612, 618
        }
    }
}
